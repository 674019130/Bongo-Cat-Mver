<Page x:Class="MyWpfApp.tutorial.Tutorial_Keymap"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:MyWpfApp.tutorial"
      mc:Ignorable="d" 
      d:DesignWidth="800"
      Title="Tutorial_Keymap">




    <Page.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Bongocat_BtnStyle.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Page.Resources>

    
    
    <Grid>
        <StackPanel Margin="80,0,0,0">
            <TextBlock HorizontalAlignment="Left" Margin="10,10,0,0" TextWrapping="Wrap" Text="键位映射" FontSize="30" VerticalAlignment="Top" Height="38"/>
            <ScrollViewer Margin="0,10,0,0" Focusable="False" 
                        CanContentScroll="False" 
                        Style="{StaticResource CatScrollViewer}">

                <StackPanel>
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="14" VerticalAlignment="Top" >
                <Run Text="        只是修改完图片的话，程序并不会知道您希望用哪一个按键来触发这个图片，您修改图片对于程序来说只是从一堆像素换到另一堆像素而已。而此教程页，正是为了让你知道如何将自己加入的图片绑定到键盘上的具体按键。"/>
                    </TextBlock>
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="20" VerticalAlignment="Top" >
                <Run Text="认识键码(keyCode)" FontWeight="Bold" />
                    </TextBlock>
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="14" VerticalAlignment="Top" >
                <Run Text="        键码是程序里用来表示按键的数字。"/>
                    </TextBlock>
                    <Image Source="../Resources/tutorial/img_tutorial_8.jpg" Margin="0,10,0,0" />
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="14" VerticalAlignment="Top" >
                <Run Text="        除上图中的键盘按键的键码外，鼠标按键也是有键码的。"/>
                    </TextBlock>
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="14" VerticalAlignment="Top" >
                <Run Text="        鼠标左键：1，右键：2，中键：4，侧键：5、6。"/>
                    </TextBlock>
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="20" VerticalAlignment="Top" >
                <Run Text="config.json中键码与图片的对应关系" FontWeight="Bold" />
                    </TextBlock>
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="14" VerticalAlignment="Top" >
                <Run Text="        以“img/standard/keyboard/”为例，我们打开standard文件夹里keyboard文件夹，可以看到其中的图片命名为0，1，2，3，…，这个文件名表示的是图片的顺序。"/>
                    </TextBlock>
                    <Image Source="../Resources/tutorial/img_tutorial_11.png" Margin="0,10,0,0" Width="400"/>
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="14" VerticalAlignment="Top" >
                <Run Text="        然后我们需要在config中找到standard模式里keyboard的键码位置。首先找结点“standard”，这里再次提醒，和“standard”同级的“keyboard”指的是纯键盘模式，不是指键码。我们需要找的是“standard”括号里面的那个“keyboard”。"/>
                    </TextBlock>
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="14" VerticalAlignment="Top" >
                <Run Text="        这里直接用一张图来表示图片与键码的对应关系。现在的版本已经能设置无数组映射了。"/>
                    </TextBlock>
                    <Image Source="../Resources/tutorial/img_tutorial_12.png" Margin="0,10,0,0" Width="500"/>
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="14" VerticalAlignment="Top" >
                <Run Text="        当然，对于手部动作hand和音频sound等键位设置都是同理的。"/>
                    </TextBlock>
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="14" VerticalAlignment="Top" >
                <Run Text="        其实上图中，每一个按键都是一个组合键，只是要因为这个组合键里只包括1个数字，有时需要用组合键比如组合ctrl键来使用表情来防止误触、表现W键A键同时按下的动作时，照下图格式设置即可。下图表示键码17、38的键同时按下时才触发对应动作。"/>
                    </TextBlock>
                    <Image Source="../Resources/tutorial/img_tutorial_13.png" Margin="0,10,0,0" Width="450"/>
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="20" VerticalAlignment="Top" >
                <Run Text="弃用某一组映射" FontWeight="Bold" />
                    </TextBlock>
                    <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"  FontSize="14" VerticalAlignment="Top" >
                <Run Text="        有的时候，我们可能不需要软件的音频或表情功能，这时候我们可以通过弃用对应的键位映射来防止直播过程的误触。注意弃用的方法不是删除整个节点。被删除的节点在程序运行中会变为程序默认的值。正确的做法是删除括号内部的数据。"/>
                    </TextBlock>
                    <Image Source="../Resources/tutorial/img_tutorial_14.png" Margin="0,10,0,100" Width="400"/>
                </StackPanel>

            </ScrollViewer>
        </StackPanel>

    </Grid>
</Page>
